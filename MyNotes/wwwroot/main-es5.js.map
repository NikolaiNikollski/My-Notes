{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Data/Note.ts","webpack:///src/app/Data/http.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/authorization/app.authorization.ts","webpack:///src/app/authorization/app.authorization.html","webpack:///src/app/main/app.main.ts","webpack:///src/app/main/app.main.html","webpack:///src/app/notelist/app.notelist.ts","webpack:///src/app/notelist/app.notelist.html","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Note","text","date","Text","Date","Id","Selected","TempText","HttpService","http","urlNote","urlAccount","note","formData","FormData","append","post","put","get","pipe","data","map","noteId","form","credentials","JSON","stringify","value","console","log","headers","tokenGetter","localStorage","getItem","AppModule","forRoot","config","allowedDomains","disallowedRoutes","imports","declarations","bootstrap","AppAuthorization","httpService","register","subscribe","response","login","token","accessToken","refreshToken","setItem","invalidLogin","err","selector","templateUrl","styleUrls","providers","AppMain","userId","AppNotelist","notelist","formateDate","save","unshift","setTimeout","update","index","splice","loadNotes","inDate","options","month","day","hour","minute","toLocaleString","createNote","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export class Note {\n    Text: string;\n    Date: string;\n    Id: number;\n    Selected: boolean;\n    TempText: string;\n\n    constructor(text: string, date: string, id: number) {\n        this.Text = text;\n        this.Date = date;\n        this.Id = id;\n        this.Selected = false;\n        this.TempText = null;\n    }\n} \n","import { Note } from './Note';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n    urlNote: string = 'http://localhost/Api/Note';\r\n    urlAccount: string = 'http://localhost/Api/Auth'\r\n    constructor(private http: HttpClient) { }\r\n\r\n    save(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date)\r\n        return this.http.post(this.urlNote, formData)\r\n    }\r\n\r\n    update(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date)\r\n        return this.http.put(this.urlNote + '/' + note.Id, formData)\r\n    }\r\n\r\n    loadNotes(): Observable<Note[]> {\r\n       return this.http.get(this.urlNote).pipe(map(data => {\r\n            return data.map(note => new Note(note.text, note.date, note.noteId))              \r\n        }));\r\n    }\r\n\r\n    delete(note): Observable<object> {\r\n        return this.http.delete(this.urlNote + '/' + note.Id)\r\n    }\r\n\r\n    login(form: NgForm): Observable<object> {\r\n        const credentials = JSON.stringify(form.value);\r\n        console.log(credentials);\r\n        return this.http.post(this.urlAccount + '/login', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n    register(form: NgForm): Observable<object>  {\r\n        const credentials = JSON.stringify(form.value);\r\n        return this.http.post(this.urlAccount + '/register', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppMain } from './main/app.main';\nimport { AppNotelist } from './notelist/app.notelist';\nimport { AppAuthorization } from './authorization/app.authorization'\n\nimport { JwtModule } from \"@auth0/angular-jwt\";\n\nexport function tokenGetter() {\n  return localStorage.getItem(\"jwt\");\n}\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        JwtModule.forRoot({\n            config: {\n                tokenGetter: tokenGetter,\n                allowedDomains: [\"localhost\"],\n                disallowedRoutes: []\n            }\n        })\n    ],\n    declarations: [\n        AppMain,\n        AppNotelist,\n        AppAuthorization,\n    ], \n    bootstrap: [AppMain]\n})\nexport class AppModule { }","import { Component, Input } from '@angular/core';\nimport { Note } from '../Data/Note'\nimport { HttpService } from '../Data/http.service'\nimport { NgForm } from '@angular/forms';\r\n\n@Component({\n    selector: 'authorization',\n    templateUrl: 'app.authorization.html',\n    styleUrls: ['app.authorization.css'],\n    providers: [HttpService],\n})\nexport class AppAuthorization {\n\n    constructor(private httpService: HttpService) { }\n\n    invalidLogin: boolean; s\n\n    register(form: NgForm) {\n        this.httpService.register(form).subscribe(response => console.log(response))\n    }\n\n    login(form: NgForm) {\n\n        this.httpService.login(form).subscribe(\n            response => {\n                const token = (<any>response).value.accessToken\n                const refreshToken = (<any>response).value.refreshToken;\n                localStorage.setItem(\"jwt\", token);\n                localStorage.setItem(\"refreshToken\", refreshToken);\n                this.invalidLogin = false;\n            },\n            err => {\n                this.invalidLogin = true\r\n            }\r\n        )\n    }\n}","<form class=\"form-signin\" #loginForm=\"ngForm\" (ngSubmit)=\"login(loginForm)\">\r\n    <div class=\"container-fluid\">\r\n        <h2 class=\"form-signin-heading\">Login</h2>\r\n        <div *ngIf=\"invalidLogin\" class=\"alert alert-danger\">Invalid username or password.</div>\r\n        <br />\r\n        <label for=\"username\" class=\"sr-only\">Email address</label>\r\n        <input type=\"email\" id=\"username\" name=\"username\" ngModel class=\"form-control\" placeholder=\"User Name\" required autofocus>\r\n        <br />\r\n        <label for=\"password\" class=\"sr-only\">Password</label>\r\n        <input type=\"password\" id=\"password\" name=\"password\" ngModel class=\"form-control\" placeholder=\"Password\" required>\r\n        <br />\r\n        <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n    </div>\r\n</form>\r\n\r\n<form class=\"form-signin\" #registerForm=\"ngForm\" (ngSubmit)=\"register(registerForm)\">\r\n    <div class=\"container-fluid\">\r\n        <h2 class=\"form-signin-heading\">Register</h2>\r\n        <div *ngIf=\"invalidLogin\" class=\"alert alert-danger\">Invalid username or password.</div>\r\n        <br />\r\n        <label for=\"username\" class=\"sr-only\">Email address</label>\r\n        <input type=\"email\" id=\"username\" name=\"username\" ngModel class=\"form-control\" placeholder=\"User Name\" required autofocus>\r\n        <br />\r\n        <label for=\"password\" class=\"sr-only\">Password</label>\r\n        <input type=\"password\" id=\"password\" name=\"password\" ngModel class=\"form-control\" placeholder=\"Password\" required>\r\n        <br />\r\n        <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Register</button>\r\n    </div>\r\n</form>\r\n","import { Component } from '@angular/core';\nimport { Note } from '../Data/Note'\n\n@Component({\n    selector: 'my-app',\n    templateUrl: 'app.main.html',\n    styleUrls: ['app.main.css']\n\n})\nexport class AppMain {\n   userId: number = null\n}\n\n","<div>\n    <authorization></authorization>\n    <notelist></notelist>\n</div>  \n\n","import { Component } from '@angular/core';\r\nimport { HttpService } from '../Data/http.service'\r\nimport { Note } from '../Data/Note';\r\n\r\n@Component({\r\n    selector: 'notelist',\r\n    templateUrl: 'app.notelist.html',\r\n    styleUrls: ['app.notelist.css'],\r\n    providers: [HttpService],\r\n})\r\n\r\nexport class AppNotelist {\r\n\r\n    notelist: Array<Note> = [];\r\n\r\n    constructor(private httpService: HttpService) { }\r\n\r\n    createNote(): void {\r\n        let note: Note = new Note(\"\", this.formateDate(new Date), null)\r\n\r\n        this.httpService.save(note).subscribe((id: any) => {\r\n            note.Id = id\r\n        })\r\n\r\n        this.notelist.unshift(note)\r\n        setTimeout(() => {\r\n            note.Selected = true\r\n        }, 100);\r\n    }\r\n\r\n    update(note: Note): void {\r\n        this.httpService.update(note).subscribe()\r\n        note.Selected = false;\r\n        note.TempText = null;\r\n    }\r\n\r\n    del(note: Note, index: number): void {\r\n        this.httpService.delete(note).subscribe()\r\n        note.Selected = false;\r\n        this.notelist.splice(index, 1)\r\n    }\r\n\r\n\r\n    selectNote(note: Note): void {\r\n        note.Selected = true;\r\n        note.TempText = note.Text\r\n    }\r\n\r\n    unselectNote(note: Note, index: number): void {\r\n        note.Selected = false;\r\n        note.Text = note.TempText\r\n        note.TempText = null;\r\n    }\r\n\r\n    loadNotes(): void {\r\n        this.httpService.loadNotes().subscribe((data: Array<Note>) => {\r\n            this.notelist = data\r\n        })\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loadNotes()\r\n    }\r\n\r\n    formateDate(inDate: Date): string {\r\n        const options = {\r\n            month: 'long',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n        };\r\n        return inDate.toLocaleString('ru', options);\r\n    }\r\n}\r\n\r\n\r\n","<div style=\"height: 60px;\">\n    <button class=\"btn btn-success createButton\" (click)=\"createNote()\">New Note</button>\n</div>\n<div class=\"notelistContainer col-md-6 offset-md-3\">\n    <div class=\"noteContainer\" [class.selected]=\"note.Selected\" *ngFor=\"let note of notelist; index as index;\">\n        <div class=\"body\" [class.selected]=\"note.Selected\" (click)=\"selectNote(note)\">\n            <textarea class=\"noteText\" [class.selected]=\"note.Selected\" [(ngModel)]=\"note.Text\" [disabled]=\"!note.Selected\"></textarea>\n            <input class=\"noteDate\" [class.selected]=\"note.Selected\" type=\"text\" [(ngModel)]=\"note.Date\" disabled>\n        </div>\n        <div class=\"buttonBlock\">\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success saveButton\" (click)=\"update(note, index)\">Save</button>\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success canselButton\" (click)=\"unselectNote(note, index)\">Cansel</button>\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success deleteButton\" (click)=\"del(note, index)\">Delete</button>\n        </div>\n    </div>\n</div>\n\n    ","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);"]}