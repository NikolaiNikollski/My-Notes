{"version":3,"sources":["webpack:///src/app/data/cookie.service.ts","webpack:///src/app/authorization/app.authorization.ts","webpack:///src/app/authorization/app.authorization.html","webpack:///src/app/welcome/app.welcome.ts","webpack:///src/app/welcome/app.welcome.html","webpack:///src/app/app.module.ts","webpack:///src/app/data/http.service.ts","webpack:///src/app/app.Configuration.ts","webpack:///src/app/notelist/app.notelist.ts","webpack:///src/app/notelist/app.notelist.html","webpack:///src/app/main/app.main.ts","webpack:///src/app/main/app.main.html","webpack:///src/app/data/note.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["CookieService","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","undefined","value","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue","setCookie","AppAuthorization","fb","httpService","cookieService","onChangedAuth","activeLoginForm","activeRegisterForm","error","_createRegisterForm","_createLoginForm","registerForm","group","username","required","minLength","password","pattern","rePassword","isRePasswordCorrect","loginForm","control","condition","get","valid","RePasswordCorrectionError","console","log","data","invalid","_registerUsername","markAsTouched","_registerPassword","_registerRePassword","logout","register","subscribe","response","onCopmplete","err","onError","_loginUsername","_loginPassword","login","errResponse","emit","deleteCookie","userName","selector","templateUrl","styleUrls","providers","userAuthenticated","Welcome","tokenGetter","getCookie","AppModule","forRoot","config","allowedDomains","disallowedRoutes","imports","declarations","bootstrap","HttpService","http","conf","urlNote","serverUrl","urlAuth","note","formData","FormData","append","Text","post","Id","toString","pipe","notes","map","text","date","noteId","form","credentials","JSON","stringify","headers","observe","toPromise","Configuration","AppNotelist","jwtHelper","onChangedUserName","notelist","_createUpdateNoteForm","updateNoteForm","id","canActivate","canActivatePromise","formateDate","create","unshift","setTimeout","Selected","index","update","TempText","splice","push","loadNotes","inDate","month","day","hour","minute","toLocaleString","tryRefreshingTokens","refreshSuccessPromise","ok","createNote","AppMain","isUserAuthenticated","increased","newUserName","Note","platform","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CookieService {\r\n\r\n    getCookie(name) {\r\n        let matches = document.cookie.match(new RegExp(\r\n            \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n        ));\r\n        return matches ? decodeURIComponent(matches[1]) : undefined;\r\n    }\r\n\r\n\r\n    setCookie(name, value, options) {\r\n\r\n        options = {\r\n            path: '/',\r\n            // ��� ������������� �������� ������ �������� �� ���������\r\n            ...options\r\n        };\r\n\r\n        if (options.expires instanceof Date) {\r\n            options.expires = options.expires.toUTCString();\r\n        }\r\n\r\n        let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n\r\n        for (let optionKey in options) {\r\n            updatedCookie += \"; \" + optionKey;\r\n            let optionValue = options[optionKey];\r\n            if (optionValue !== true) {\r\n                updatedCookie += \"=\" + optionValue;\r\n            }\r\n        }\r\n\r\n        document.cookie = updatedCookie;\r\n    }\r\n\r\n    deleteCookie(name) {\r\n        this.setCookie(name, \"\", {\r\n            'max-age': -1\r\n        })\r\n    }\r\n\r\n}\r\n\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { HttpService } from '../data/http.service'\nimport { CookieService } from '../data/cookie.service'\r\nimport { NgForm, Validators, FormBuilder, FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n\r\n@Component({\n    selector: 'authorization',\n    templateUrl: 'app.authorization.html',\n    styleUrls: ['app.authorization.css'],\n    providers: [HttpService, CookieService],\n})\nexport class AppAuthorization{\n    registerForm: FormGroup;\r\n    loginForm: FormGroup;\r\n\r\n    constructor(private fb: FormBuilder, private httpService: HttpService, private cookieService: CookieService ) {\r\n        this._createRegisterForm();\r\n        this._createLoginForm();\r\n    }\r\n\r\n    private _createRegisterForm() {\r\n        this.registerForm = this.fb.group({\r\n            username: ['', [\r\n                Validators.required,\r\n                Validators.minLength(3),\r\n            ]],\r\n            password: ['', [\r\n                    Validators.required,\r\n                    Validators.minLength(5),\r\n                    Validators.pattern(/[0-9]/),\r\n                    Validators.pattern(/[a-zA-Z]/),\r\n            ]],\r\n            rePassword: ['', [\r\n                Validators.required,\r\n                this.isRePasswordCorrect(),\r\n            ]],\r\n        })\r\n    }\r\n\r\n    get _registerUsername() {\r\n        return this.registerForm.get('username')\r\n    }\r\n\r\n    get _registerPassword() {\r\n        return this.registerForm.get('password')\r\n    }\r\n\r\n    get _registerRePassword() {\r\n        return this.registerForm.get('rePassword')\r\n    }\r\n\r\n\r\n    private _createLoginForm() {\r\n        this.loginForm = this.fb.group({\r\n            username: ['', [\r\n                Validators.required,\r\n            ]],\r\n            password: ['', [\r\n                Validators.required,\r\n            ]],\r\n        })\r\n    }\r\n\r\n    get _loginUsername() {\r\n        return this.loginForm.get('username')\r\n    }\r\n\r\n    get _loginPassword() {\r\n        return this.loginForm.get('password')\r\n    }\r\n\r\n    isRePasswordCorrect(): ValidatorFn {\r\n        return (\r\n            control: AbstractControl\r\n        ): { [key: string]: boolean } | null => {\r\n\r\n            if (this.registerForm) {\r\n                var condition = this.registerForm.get('password').value === this.registerForm.get('rePassword').value\r\n            }\r\n            let valid =\r\n                !control.value || condition\r\n            return valid ? null : {\r\n                RePasswordCorrectionError: true,\r\n            }\r\n        }\r\n    }\r\n\n    getFormcontroll() {\n        console.log(this.registerForm)\r\n    }\n\n    @Input() userAuthenticated;\n    @Input() userName\n    @Output() onChangedAuth = new EventEmitter<boolean>();\n    activeLoginForm: boolean = false;\n    activeRegisterForm: boolean = false\n    error: string = null;\n\n    getLoginForm() {\n        this.activeLoginForm = true;\r\n        this.activeRegisterForm = false;\r\n        this.error = null;\r\n    }\n\n    getRegisterForm() {\n        this.activeRegisterForm = true;\r\n        this.activeLoginForm = false;\r\n        this.error = null;\r\n    }\n\n    register(data) {\n        if (this.registerForm.invalid) {\n            this._registerUsername.markAsTouched()\n            this._registerPassword.markAsTouched()\n            this._registerRePassword.markAsTouched()\n            return\n        }   \n        \n        this.logout()\n        this.httpService.register(data).subscribe(response => this.onCopmplete(response), (err: HttpErrorResponse) => this.onError(err))\n    }\n\n    login(data) {\n        if (this.loginForm.invalid) {\n            this._loginUsername.markAsTouched()\n            this._loginPassword.markAsTouched()\n            return\n        }   \n        this.logout()\n        this.httpService.login(data).subscribe(response => this.onCopmplete(response), errResponse => this.onError(errResponse))\n    }\n\n    onCopmplete(response) {\r\n        this.onChangedAuth.emit(true);\r\n        this.activeLoginForm = false;\r\n        this.activeRegisterForm = false;\r\n        this.error = null;\r\n    }\n\n    onError(errResponse) {\r\n        this.error = errResponse.error;\r\n    }\n\n    logout() {\r\n        this.cookieService.deleteCookie('accessToken')\r\n        this.onChangedAuth.emit(false);\r\n        this.activeLoginForm = true;\r\n        this.userName = null\r\n    }\n\n}\n\n","<div class=\"authorization\">\r\n    <span class=\"appName\"> Notepad</span>\r\n    <div class=\"authPanel\">\r\n        <div *ngIf=\"userAuthenticated\" class=\"userNameBlock\">\r\n            <svg class=\"userNameIcon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8 1.9C9.16 1.9 10.1 2.84 10.1 4C10.1 5.16 9.16 6.1 8 6.1C6.84 6.1 5.9 5.16 5.9 4C5.9 2.84 6.84 1.9 8 1.9ZM8 10.9C10.97 10.9 14.1 12.36 14.1 13V14.1H1.9V13C1.9 12.36 5.03 10.9 8 10.9ZM8 0C5.79 0 4 1.79 4 4C4 6.21 5.79 8 8 8C10.21 8 12 6.21 12 4C12 1.79 10.21 0 8 0ZM8 9C5.33 9 0 10.34 0 13V16H16V13C16 10.34 10.67 9 8 9Z\" fill=\"#2F7DF6\" />\r\n            </svg>\r\n            <span>{{userName}}</span>\r\n        </div>\r\n        <button *ngIf=\"!userAuthenticated\" class=\"authPanelButton\" (click)=\"getLoginForm()\">Log In</button>\r\n        <button *ngIf=\"!userAuthenticated\" class=\"authPanelButton\" (click)=\"getRegisterForm()\">Registration</button>\r\n        <div *ngIf=\"userAuthenticated\" class=\"logautBlock\">\r\n            <button class=\"authPanelButton\" (click)=\"logout()\">Logout</button>\r\n            <svg class=\"logoutIcon\" width=\"19\" height=\"20\" viewBox=\"0 0 19 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M2 0H11C11.5304 0 12.0391 0.210714 12.4142 0.585786C12.7893 0.960859 13 1.46957 13 2V4H11V2H2V18H11V16H13V18C13 18.5304 12.7893 19.0391 12.4142 19.4142C12.0391 19.7893 11.5304 20 11 20H2C1.46957 20 0.960859 19.7893 0.585786 19.4142C0.210714 19.0391 0 18.5304 0 18V2C0 1.46957 0.210714 0.960859 0.585786 0.585786C0.960859 0.210714 1.46957 0 2 0Z\" fill=\"#2F7DF6\" />\r\n                <path d=\"M12.09 13.59L13.5 15L18.5 10L13.5 5L12.09 6.41L14.67 9H5V11H14.67L12.09 13.59Z\" fill=\"#2F7DF6\" />\r\n            </svg>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <form [class.hiden]=\"!activeLoginForm\" [formGroup]=\"loginForm\" (ngSubmit)=\"login(loginForm)\" novalidate>\r\n        <div class=\"container-fluid formContainer\">\r\n            <h2 class=\"formHeader\">Log In</h2> <br />\r\n\r\n            <div class=\"inputBlock\">\r\n                <img class=\"inputIcon\" src=\"/assets/usernameIcon.svg\">\r\n                <input formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n            </div>\r\n\r\n            <div class=\"inputBlock\">\r\n                <img class=\"inputIcon\" src=\"/assets/passwordIcon.svg\">\r\n                <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\r\n            </div>\r\n\r\n            <button class=\"btn btn-lg btn-primary formButton\" type=\"submit\">Sign up</button>\r\n\r\n            <span class=\"validationErrorText\" *ngIf=\"_loginUsername.touched && _loginUsername.invalid || _loginPassword.touched &&  _loginPassword.invalid\">\r\n                Fill in all required fields. <br />\r\n            </span>\r\n\r\n            <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\r\n        </div>\r\n    </form>\r\n\r\n\r\n\r\n    <form [class.hiden]=\"!activeRegisterForm\" [formGroup]=\"registerForm\" (ngSubmit)=\"register(registerForm)\" novalidate>\r\n        <div class=\"container-fluid formContainer\">\r\n            <h2 class=\"formHeader\">Registration</h2> <br />\r\n\r\n            <div class=\"inputBlock\">\r\n                <img class=\"inputIcon\" src=\"/assets/usernameIcon.svg\">\r\n                <input formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n\r\n                <span class=\"validationErrorText\" *ngIf=\"_registerUsername.touched && _registerUsername.errors?.minlength\">\r\n                    Username must contain at least {{_registerUsername.errors?.minlength.requiredLength}} simbols. <br />\r\n                </span>\r\n            </div>\r\n\r\n            <div class=\"inputBlock\">\r\n                <img class=\"inputIcon\" src=\"/assets/passwordIcon.svg\">\r\n                <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\r\n\r\n                <span class=\"validationErrorText\" *ngIf=\"_registerPassword.touched && _registerPassword.errors?.minlength\">\r\n                    Password must contain at least {{_registerPassword.errors?.minlength.requiredLength}} simbols. <br />\r\n                </span>\r\n                <span class=\"validationErrorText\" *ngIf=\"_registerPassword.touched && _registerPassword.errors?.pattern?.requiredPattern == '/[0-9]/' \">\r\n                    Password must contain digit. <br />\r\n                </span>\r\n                <span class=\"validationErrorText\" *ngIf=\"_registerPassword.touched && _registerPassword.errors?.pattern?.requiredPattern == '/[a-zA-Z]/' \">\r\n                    Password must contain letter. <br />\r\n                </span>\r\n            </div>\r\n\r\n            <div class=\"inputBlock\">\r\n                <img class=\"inputIcon\" src=\"/assets/rePasswordIcon.svg\">\r\n                <input formControlName=\"rePassword\" type=\"password\" class=\"form-control\" placeholder=\"Password Repeat\">\r\n\r\n                <span class=\"validationErrorText\" *ngIf=\"_registerRePassword.touched && _registerRePassword.errors?.RePasswordCorrectionError\">\r\n                    Passwords must match. <br />\r\n                </span>\r\n            </div>\r\n\r\n            <button class=\"btn btn-lg btn-primary formButton\" type=\"submit\">Register</button>\r\n\r\n            <span class=\"validationErrorText\" *ngIf=\"_registerUsername.touched && _registerUsername.errors?.required ||\r\n                  _registerPassword.touched && _registerPassword.errors?.required ||\r\n                  _registerRePassword.touched && _registerRePassword.errors?.required\">\r\n                Fill in all required fields. <br />\r\n            </span>\r\n\r\n            <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\r\n        </div>\r\n    </form>\r\n\r\n    <img *ngIf=\"!userAuthenticated\" class=\"icon\" src=\"/assets/welcome.svg\" alt=\"app Icon\">\r\n\r\n</div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'welcome',\r\n    templateUrl: 'app.welcome.html',\r\n    styleUrls: ['app.welcome.css'],\r\n})\r\n\r\nexport class Welcome {\r\n\r\n\r\n}\r\n\r\n\r\n","<div class=\"welcome\">\n    <div class=\"col-md-6 offset-md-3 welcomeInner\">\n        <!--<div>\n            Hello, dear friend! <br />\n            We are glad to see you!  <br />\n            Please login or register  <br />\n            to open your notepad.  <br />\n        </div>-->\n    </div>\n</div>\n\n","import { JwtModule } from \"@auth0/angular-jwt\";\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppMain } from './main/app.main';\nimport { AppNotelist } from './notelist/app.notelist';\nimport { AppAuthorization } from './authorization/app.authorization'\nimport { CookieService } from './data/cookie.service'\nimport { Welcome } from './welcome/app.welcome'\n\nexport function tokenGetter() {\n    let cookieService: CookieService = new CookieService;\n    return cookieService.getCookie(\"accessToken\")\n}\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        FormsModule,\n        ReactiveFormsModule,\n        JwtModule.forRoot({\n            config: {\n                tokenGetter: tokenGetter,\n                allowedDomains: [\"localhost\"],\n                disallowedRoutes: []\n            }\n        })\n    ],\n    declarations: [\n        AppMain,\n        AppNotelist,\n        AppAuthorization,\n        Welcome,\n    ], \n    bootstrap: [AppMain]\n})\nexport class AppModule { }","import { Note } from './note';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Configuration } from '../app.Configuration'\r\n\r\n@Injectable()\r\nexport class HttpService  {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    conf = new Configuration()\r\n\r\n    urlNote: string = this.conf.serverUrl + '/Api/Note'\r\n    urlAuth: string = this.conf.serverUrl + '/Api/Auth'\r\n\r\n    create(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date)\r\n        return this.http.post(this.urlNote + \"/createNote\", formData)\r\n    }\r\n\r\n    update(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date);\r\n        formData.append('noteId', note.Id.toString());\r\n        return this.http.post(this.urlNote + '/updateNote', formData)\r\n    }\r\n\r\n    loadNotes(): Observable<object[]> {\r\n      \r\n        return this.http.get(this.urlNote + '/getAllNotes').pipe(map(data => {\r\n            return { ...(<any>data).value, notes: (<any>data).value.notes.map(note => new Note(note.text, note.date, note.noteId)) }              \r\n        }));\r\n    }\r\n\r\n    delete(note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('noteId', note.Id.toString());\r\n        return this.http.post(this.urlNote + '/deleteNote', formData)\r\n    }\r\n\r\n    checkUsername(username: string): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('username', username);\r\n        return this.http.post(this.urlAuth + '/checkUsername', formData)\r\n    }\r\n\r\n    login(form: NgForm): Observable<object> {\r\n        const credentials = JSON.stringify(form.value);\r\n        return this.http.post(this.urlAuth + '/login', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n\r\n    register(form: NgForm): Observable<object>  {\r\n        const credentials = JSON.stringify(form.value);\r\n        return this.http.post(this.urlAuth + '/register', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n\r\n    async refresh(): Promise<HttpResponse<Object>>{\r\n        const response = await this.http.post(this.urlAuth + '/refresh', null, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            observe: 'response'\r\n        }).toPromise();\r\n        return response\r\n    }\r\n}","export class Configuration {\r\n    serverUrl: string = 'http://localhost' /*'https://notepad45.herokuapp.com'*/\r\n}","import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { HttpService } from '../data/http.service'\r\nimport { Note } from '../data/note';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { HttpHeaders, HttpClient, } from '@angular/common/http';\r\nimport { CookieService } from '../data/cookie.service'\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n    selector: 'notelist',\r\n    templateUrl: 'app.notelist.html',\r\n    styleUrls: ['app.notelist.css'],\r\n    providers: [HttpService, CookieService],\r\n})\r\n\r\nexport class AppNotelist {\r\n\r\n    updateNoteForm: FormGroup;\r\n    @Output() onChangedUserName = new EventEmitter<string>();\r\n    \r\n    notelist: Array<Note> = [];\r\n    constructor(private fb: FormBuilder, private httpService: HttpService, private jwtHelper: JwtHelperService, private cookieService: CookieService) {\r\n        this._createUpdateNoteForm();\r\n    }\r\n\r\n    private _createUpdateNoteForm() {\r\n        this.updateNoteForm = this.fb.group({\r\n            text: [''],\r\n            id: [''],\r\n        })\r\n    }\r\n\r\n    async createNote(): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) {\r\n            this.onChangedUserName.emit(null)\r\n            return\r\n        }\r\n\r\n        let note: Note = new Note(\"\", this.formateDate(new Date), null)\r\n\r\n        this.httpService.create(note).subscribe((id: any) => {\r\n            note.Id = id\r\n        }, (err) => { this.onChangedUserName.emit(null) })\r\n\r\n        this.notelist.unshift(note)\r\n        setTimeout(() => {\r\n            note.Selected = true\r\n        }, 100);\r\n    }\r\n\r\n    async update(note: Note, index: number): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) {\r\n            this.onChangedUserName.emit(null)\r\n            return\r\n        }\r\n\r\n        this.httpService.update(note).subscribe(() => { }, (err) => { this.onChangedUserName.emit(null) })\r\n        note.Selected = false;\r\n        note.TempText = null;\r\n    }\r\n\r\n    async del(note: Note, index: number): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) {\r\n            this.onChangedUserName.emit(null)\r\n            return\r\n        }\r\n        this.httpService.delete(note).subscribe(() => { }, (err) => { this.onChangedUserName.emit(null) })\r\n        note.Selected = false;\r\n        this.notelist.splice(index, 1)\r\n    }\r\n\r\n\r\n    async selectNote(note: Note): Promise<void> {\r\n        console.log('activ');\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) {\r\n            this.onChangedUserName.emit(null)\r\n            return\r\n        }\r\n\r\n        note.Selected = true;\r\n        note.TempText = note.Text\r\n        console.log(this.notelist)\r\n    }\r\n\r\n    async unselectNote(note: Note, index: number): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) {\r\n            this.onChangedUserName.emit(null)\r\n            return\r\n        }\r\n\r\n        note.Selected = false;\r\n        note.Text = note.TempText\r\n        note.TempText = null;\r\n    }\r\n\r\n    async loadNotes(): Promise<void> {\r\n        //let canActivatePromise = await this.canActivate()\r\n        //if (!canActivatePromise) {\r\n        //    this.onChangedUserName.emit(null)\r\n        //    return\r\n        //}\r\n\r\n        //this.httpService.loadNotes().subscribe((data: any) => {\r\n        //    this.notelist = data.notes.reverse(data.notes)\r\n        //    this.onChangedUserName.emit(data.name)\r\n        //}, (err) => { this.onChangedUserName.emit(null) })\r\n        this.notelist.push(new Note('Hello World! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', '8 december, 13:52', 1))\r\n        this.notelist.push(new Note('Hello World! Lorem ipsum dolor sit amet.', '11 december, 13:51', 1))\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.loadNotes()\r\n    }\r\n\r\n    formateDate(inDate: Date): string {\r\n        const options = {\r\n            month: 'long',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n        };\r\n        return inDate.toLocaleString('ru', options);\r\n    }\r\n\r\n    async canActivate() {\r\n        return true; ////!!!\r\n        const token = this.cookieService.getCookie('accessToken')\r\n        if (token && !this.jwtHelper.isTokenExpired(token))\r\n            return true;\r\n\r\n        let refreshSuccessPromise = await this.tryRefreshingTokens()\r\n        return refreshSuccessPromise\r\n    }\r\n\r\n    private async tryRefreshingTokens(): Promise<boolean> {\r\n        return true; //!!\r\n        try {\r\n            const response = await this.httpService.refresh()\r\n            return response.ok\r\n        }\r\n        catch {\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","<div class=\"notelist\">\n    <div class=\"col-md-8 offset-md-2 tableTitle\">\n        <span class=\"notes\">Notes</span>\n        <div class=\"lineBlock\">\n            <svg class=\"point\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"#2F7DF6\" />\n            </svg>\n            <img src=\"/assets/line.svg\" class=\"line\">\n        </div>\n        <div class=\"createButtonBlock\">\n            <button class=\"btn btn-primary createButton\" (click)=\"createNote()\">New Note</button>\n            <img class=\"createButtonIcon\" src=\"/assets/buttonIcon.svg\">\n        </div>\n    </div>\n\n    <!--<table class=\"table table-bordered notelistContainer col-md-8 offset-md-2\">\n        <tbody>\n            <tr class=\"noteContainer clickable\" [class.selected]=\"note.Selected\" *ngFor=\"let note of notelist; index as index;\">\n                <td class=\"textBlock clickable\" [class.selected]=\"note.Selected\" (click)=\"selectNote(note)\">\n                    <textarea class=\"textBlockInherit\" [class.selected]=\"note.Selected\" contenteditable=\"true\" [(ngModel)]=\"note.Text\" [disabled]=\"!note.Selected\"></textarea>\n                </td>\n                <td class=\"buttonBlock\">\n                    <button class=\"btn btn-success saveButton\" [class.selected]=\"note.Selected\" (click)=\"update(note, index)\">Save <br /></button>\n                    <button class=\"btn btn-warning cancelButton\" [class.selected]=\"note.Selected\" (click)=\"unselectNote(note, index)\">Cancel <br /></button>\n                    <button class=\"btn btn-danger deleteButton\" [class.selected]=\"note.Selected\" (click)=\"del(note, index)\">Delete</button>\n                    <spam class=\"date\" [class.selected]=\"note.Selected\">{{note.Date}}</spam>\n                </td>\n            </tr>\n        </tbody>\n    </table>-->\n\n<div class=\"notelistContainer col-md-8 offset-md-2\">\n    <!--clickable--> <div class=\"noteContainer\" [class.selected]=\"note.Selected\" *ngFor=\"let note of notelist; index as index;\">\n        <div class=\"date\" [class.selected]=\"note.Selected\">{{note.Date}}</div>\n        <textarea class=\"textBlockInherit\" [class.selected]=\"note.Selected\" contenteditable=\"true\" [(ngModel)]=\"note.Text\" [disabled]=\"!note.Selected\"></textarea>\n        <div class=\"buttonBlock\">\n            <div class=\"saveAndCancelButtons\">\n                <button class=\"btn btn-primary saveButton\" [class.selected]=\"note.Selected\" (click)=\"update(note, index)\">Save <br /></button>\n                <button class=\"btn btn-primary cancelButton\" [class.selected]=\"note.Selected\" (click)=\"unselectNote(note, index)\">Cancel <br /></button>\n            </div>\n\n            <div class=\"deleteButtonBlock\">\n                <button class=\"btn btn-primary deleteButton\" [class.selected]=\"note.Selected\" (click)=\"del(note, index)\">Delete Note</button>\n                <svg class=\"deleteButtonIcon\" width=\"14\" height=\"18\" viewBox=\"0 0 14 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M11 6V16H3V6H11ZM9.5 0H4.5L3.5 1H0V3H14V1H10.5L9.5 0ZM13 4H1V16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4Z\" fill=\"#2F7DF6\" />\n                </svg>\n            </div>\n        </div>\n    </div>\n</div>\n\n    <div *ngIf=\"!notelist.length\" class=\"iconBlock\">\n        <img src=\"/assets/noRecords.svg\" class=\"icon\" alt=\"You have no records.\"> <br />\n        <span class=\"iconText\">You have no records</span>\n    </div>\n</div>\n\n\n","import { Component } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { CookieService } from '../data/cookie.service'\r\n\n@Component({\n    selector: 'my-app',\n    templateUrl: 'app.main.html',\n    styleUrls: ['app.main.css'],\n    providers: [CookieService],\n\n})\nexport class AppMain {\n\n    constructor(private jwtHelper: JwtHelperService, private cookieService: CookieService) { }\n\n    userAuthenticated = this.isUserAuthenticated()\n    userName: string = \"Nikolai Nikolsky\";//!!!!\n\n    onChangedAuth(increased: boolean) {\r\n        this.userAuthenticated = increased\r\n    }\n\n    onChangedUserName(newUserName: string) {\r\n        if (newUserName === null)\r\n            this.userAuthenticated = false\r\n        this.userName = newUserName\r\n    }\n\n\n    isUserAuthenticated() {\n        //const token = this.cookieService.getCookie(\"accessToken\")\n        //return (token && true);\n        return true;\n    }\n}\n\n","<div>\n    <authorization [userAuthenticated]=\"userAuthenticated\"\n                   (onChangedAuth)=\"onChangedAuth($event)\"\n                   [userName] = \"userName\">\n    </authorization>\n    <notelist \n              *ngIf=\"userAuthenticated\"\n              (onChangedUserName)=\"onChangedUserName($event)\">\n    </notelist>\n\n    <welcome *ngIf=\"!userAuthenticated\"> </welcome>\n</div>  \n\n","export class Note {\n    Text: string;\n    Date: string;\n    Id: number;\n    Selected: boolean;\n    TempText: string;\n\n    constructor(text: string, date: string, id: number) {\n        this.Text = text;\n        this.Date = date;\n        this.Id = id;\n        this.Selected = false;\n        this.TempText = null;\n    }\n} \n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}