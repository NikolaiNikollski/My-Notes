{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Data/Note.ts","webpack:///src/app/Data/http.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/authorization/app.authorization.ts","webpack:///src/app/authorization/app.authorization.html","webpack:///src/app/main/app.main.ts","webpack:///src/app/main/app.main.html","webpack:///src/app/notelist/app.notelist.html","webpack:///src/app/notelist/app.notelist.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Note","text","date","Text","Date","Id","Selected","TempText","HttpService","http","urlNote","urlAccount","note","formData","FormData","append","post","put","get","pipe","data","value","notes","map","noteId","form","credentials","JSON","stringify","headers","observe","toPromise","response","tokenGetter","localStorage","getItem","AppModule","forRoot","config","allowedDomains","disallowedRoutes","imports","declarations","bootstrap","AppAuthorization","httpService","onChangedAuth","loginForm","registerForm","invalidFetch","repeatPasswordError","password","passwordRepeat","console","log","logout","register","subscribe","onCopmplete","err","onError","login","token","accessToken","refreshToken","setItem","emit","removeItem","userName","selector","templateUrl","styleUrls","providers","userAuthenticated","AppMain","jwtHelper","isUserAuthenticated","increased","newUserName","isTokenExpired","AppNotelist","onChangedUserName","notelist","canActivate","canActivatePromise","formateDate","save","unshift","setTimeout","update","index","splice","loadNotes","name","inDate","options","month","day","hour","minute","toLocaleString","tryRefreshingTokens","refreshSuccessPromise","refresh","newToken","body","newRefreshToken","isRefreshSuccess","createNote","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export class Note {\n    Text: string;\n    Date: string;\n    Id: number;\n    Selected: boolean;\n    TempText: string;\n\n    constructor(text: string, date: string, id: number) {\n        this.Text = text;\n        this.Date = date;\n        this.Id = id;\n        this.Selected = false;\n        this.TempText = null;\n    }\n} \n","import { Note } from './Note';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n    urlNote: string = 'http://localhost/Api/Note';\r\n    urlAccount: string = 'http://localhost/Api/Auth'\r\n    constructor(private http: HttpClient) { }\r\n\r\n    save(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date)\r\n        return this.http.post(this.urlNote, formData)\r\n    }\r\n\r\n    update(note: Note): Observable<object> {\r\n        const formData = new FormData();\r\n        formData.append('text', note.Text);\r\n        formData.append('date', note.Date)\r\n        return this.http.put(this.urlNote + '/' + note.Id, formData)\r\n    }\r\n\r\n    loadNotes(): Observable<object[]> {\r\n      \r\n        return this.http.get(this.urlNote).pipe(map(data => {\r\n            return { ...data.value, notes: data.value.notes.map(note => new Note(note.text, note.date, note.noteId)) }              \r\n        }));\r\n    }\r\n\r\n    delete(note): Observable<object> {\r\n        return this.http.delete(this.urlNote + '/' + note.Id)\r\n    }\r\n\r\n    login(form: NgForm): Observable<object> {\r\n        const credentials = JSON.stringify(form.value);\r\n        return this.http.post(this.urlAccount + '/login', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n\r\n    register(form: NgForm): Observable<object>  {\r\n        const credentials = JSON.stringify(form.value);\r\n        return this.http.post(this.urlAccount + '/register', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n\r\n    async refresh(credentials): Promise<HttpResponse<Object>>{\r\n        const response = await this.http.post(this.urlAccount + '/refresh', credentials, {\r\n            headers: new HttpHeaders({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            observe: 'response'\r\n        }).toPromise();\r\n        return response\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppMain } from './main/app.main';\nimport { AppNotelist } from './notelist/app.notelist';\nimport { AppAuthorization } from './authorization/app.authorization'\n\nimport { JwtModule } from \"@auth0/angular-jwt\";\n\nexport function tokenGetter() {\n  return localStorage.getItem(\"jwt\");\n}\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        JwtModule.forRoot({\n            config: {\n                tokenGetter: tokenGetter,\n                allowedDomains: [\"localhost\"],\n                disallowedRoutes: []\n            }\n        })\n    ],\n    declarations: [\n        AppMain,\n        AppNotelist,\n        AppAuthorization,\n    ], \n    bootstrap: [AppMain]\n})\nexport class AppModule { }","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Note } from '../Data/Note'\nimport { HttpService } from '../Data/http.service'\nimport { NgForm } from '@angular/forms';\r\n\n@Component({\n    selector: 'authorization',\n    templateUrl: 'app.authorization.html',\n    styleUrls: ['app.authorization.css'],\n    providers: [HttpService],\n})\nexport class AppAuthorization {\n\n    constructor(private httpService: HttpService) { }\n\n    @Input() userAuthenticated;\n    @Input() userName\n    @Output() onChangedAuth = new EventEmitter<boolean>();\n    loginForm: boolean = false;\n    registerForm: boolean = false\n    invalidFetch: boolean = false\n    repeatPasswordError: boolean = false\n\n    getLoginForm() {\n        this.loginForm = true;\r\n        this.registerForm = false;\r\n\r\n        this.invalidFetch = false;\r\n        this.repeatPasswordError = false\r\n    }\n\n    getRegisterForm() {\n        this.registerForm = true;\r\n        this.loginForm = false;\r\n\r\n        this.invalidFetch = false;\r\n        this.repeatPasswordError = false\r\n    }\n\n\n    register(form: NgForm) {\n        this.invalidFetch = false;\r\n        this.repeatPasswordError = false\n\n        if (form.value.password !== form.value.passwordRepeat) {\n            this.repeatPasswordError = true\n            console.log(\"error\")\n            return\r\n        }\n        this.logout()\n        this.httpService.register(form).subscribe(response => this.onCopmplete(response), err => this.onError())\n\n\n    }\n\n    login(form: NgForm) {\n        this.invalidFetch = false;\r\n        this.repeatPasswordError = false\n\n        this.logout()\n        this.httpService.login(form).subscribe(response => this.onCopmplete(response), err => this.onError())\n    }\n\n    onCopmplete(response) {\n        const token = (<any>response).value.accessToken;\n        const refreshToken = (<any>response).value.refreshToken;\n        localStorage.setItem(\"jwt\", token);\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n        this.onChangedAuth.emit(true);\r\n        this.loginForm = false;\r\n        this.registerForm = false;\r\n    }\n\n    onError() {\n        this.invalidFetch = true;\r\n    }\n\n    public logout() {\r\n        localStorage.removeItem(\"jwt\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n        this.onChangedAuth.emit(false);\r\n        this.loginForm = true;\r\n        this.userName = ''\r\n    }\n}","<header>\r\n    <div class=\"nav\">\r\n        <div class=\"authPanel\">\r\n            {{userName}}\r\n            <button *ngIf=\"!userAuthenticated\" class=\"authPanelButton\" (click)=\"getLoginForm()\">Login</button>\r\n            <button *ngIf=\"!userAuthenticated\" class=\"authPanelButton\" (click)=\"getRegisterForm()\">Register</button>\r\n            <button *ngIf=\"userAuthenticated\" class=\"authPanelButton\" (click)=\"logout()\">logout</button>\r\n        </div>\r\n    </div>\r\n</header>\r\n\r\n<form *ngIf=\"loginForm\"  #loginForm=\"ngForm\" (ngSubmit)=\"login(loginForm)\">\r\n    <div class=\"container-fluid formContainer\">\r\n        <h2 class=\"form-signin-heading\">Login</h2> <br />\r\n\r\n        <input type=\"email\" name=\"username\" ngModel class=\"form-control\" placeholder=\"User Name\" required autofocus>  <br />\r\n\r\n        <input type=\"password\" name=\"password\" ngModel class=\"form-control\" placeholder=\"Password\" required> <br />\r\n\r\n        <button class=\"btn btn-lg btn-primary formButton\" type=\"submit\">Sign in</button>\r\n        <div *ngIf=\"invalidFetch\" class=\"alert alert-danger formButton\">Invalid username or password.</div>\r\n    </div>\r\n</form>\r\n\r\n<form *ngIf=\"registerForm\"  #registerForm=\"ngForm\" (ngSubmit)=\"register(registerForm)\">\r\n    <div class=\"container-fluid formContainer\">\r\n        <h2 class=\"form-signin-heading\">Register</h2> <br />\r\n        \r\n        <input type=\"email\" name=\"username\" ngModel class=\"form-control\" placeholder=\"User Name\" required autofocus> <br />\r\n        \r\n        <input type=\"password\" name=\"password\" ngModel class=\"form-control\" placeholder=\"Password\" required> <br />\r\n        \r\n        <input type=\"password\" name=\"passwordRepeat\" ngModel class=\"form-control\" placeholder=\"Password Repeat\" required> <br />\r\n        \r\n        <button class=\"btn btn-lg btn-primary formButton\" type=\"submit\">Register</button>\r\n        <div *ngIf=\"invalidFetch\" class=\"alert alert-danger\">Username is busy.</div>\r\n        <div *ngIf=\"repeatPasswordError\" class=\"alert alert-danger\">Passwords do not match.</div>\r\n    </div>\r\n</form>\r\n","import { Component } from '@angular/core';\nimport { Note } from '../Data/Note'\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\n@Component({\n    selector: 'my-app',\n    templateUrl: 'app.main.html',\n    styleUrls: ['app.main.css']\n\n})\nexport class AppMain {\n\n    constructor(private jwtHelper: JwtHelperService,) { }\n\n    userAuthenticated = this.isUserAuthenticated()\n    userName: string\n\n    onChangedAuth(increased: boolean) {\r\n        this.userAuthenticated = increased\r\n    }\n\n    onChangedUserName(newUserName: string) {\r\n        if (newUserName === '')\r\n            this.userAuthenticated = false\r\n        this.userName = newUserName\r\n    }\n\n    isUserAuthenticated() {\n        const token: string = localStorage.getItem(\"jwt\");\n        return (token && !this.jwtHelper.isTokenExpired(token));\n    }\n}\n\n","<div>\n    <authorization [userAuthenticated]=\"userAuthenticated\"\n                   (onChangedAuth)=\"onChangedAuth($event)\"\n                   [userName] = \"userName\">\n    </authorization>\n    <notelist \n              *ngIf=\"userAuthenticated\"\n              (onChangedUserName)=\"onChangedUserName($event)\">\n    </notelist>\n</div>  \n\n","<div>\n    <button class=\"btn btn-success createButton\" (click)=\"createNote()\">New Note</button>\n</div>\n<div class=\"notelistContainer col-md-6 offset-md-3\">\n    <div class=\"noteContainer\" [class.selected]=\"note.Selected\" *ngFor=\"let note of notelist; index as index;\">\n        <div class=\"body\" [class.selected]=\"note.Selected\" (click)=\"selectNote(note)\">\n            <textarea class=\"noteText\" [class.selected]=\"note.Selected\" [(ngModel)]=\"note.Text\" [disabled]=\"!note.Selected\"></textarea>\n            <input class=\"noteDate\" [class.selected]=\"note.Selected\" type=\"text\" [(ngModel)]=\"note.Date\" disabled>\n        </div>\n        <div class=\"buttonBlock\">\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success saveButton\" (click)=\"update(note, index)\">Save</button>\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success cancelButton\" (click)=\"unselectNote(note, index)\">Cancel</button>\n            <button [class.selected]=\"note.Selected\" class=\"btn btn-success deleteButton\" (click)=\"del(note, index)\">Delete</button>\n        </div>\n    </div>\n</div>\n\n    ","import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { HttpService } from '../Data/http.service'\r\nimport { Note } from '../Data/Note';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { HttpHeaders, HttpClient,  } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'notelist',\r\n    templateUrl: 'app.notelist.html',\r\n    styleUrls: ['app.notelist.css'],\r\n    providers: [HttpService],\r\n})\r\n\r\nexport class AppNotelist {\r\n\r\n    @Output() onChangedUserName = new EventEmitter<string>();\r\n    notelist: Array<Note> = [];\r\n    constructor(private httpService: HttpService, private jwtHelper: JwtHelperService, private http: HttpClient) { }\r\n\r\n\r\n    async createNote(): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n\r\n        let note: Note = new Note(\"\", this.formateDate(new Date), null)\r\n\r\n        this.httpService.save(note).subscribe((id: any) => {\r\n            note.Id = id\r\n        })\r\n\r\n        this.notelist.unshift(note)\r\n        setTimeout(() => {\r\n            note.Selected = true\r\n        }, 100);\r\n    }\r\n\r\n    async update(note: Note): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n\r\n        this.httpService.update(note).subscribe()\r\n        note.Selected = false;\r\n        note.TempText = null;\r\n    }\r\n\r\n    async del(note: Note, index: number): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n\r\n        if (!this.canActivate()) return \r\n        this.httpService.delete(note).subscribe()\r\n        note.Selected = false;\r\n        this.notelist.splice(index, 1)\r\n    }\r\n\r\n\r\n    async selectNote(note: Note): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n\r\n        note.Selected = true;\r\n        note.TempText = note.Text\r\n    }\r\n\r\n    async unselectNote(note: Note, index: number): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n \r\n        note.Selected = false;\r\n        note.Text = note.TempText\r\n        note.TempText = null;\r\n    }\r\n\r\n    async loadNotes(): Promise<void> {\r\n        let canActivatePromise = await this.canActivate()\r\n        if (!canActivatePromise) return\r\n\r\n        this.httpService.loadNotes().subscribe((data: any) => {\r\n            this.notelist = data.notes\r\n            this.onChangedUserName.emit(data.name)\r\n        })\r\n    }\r\n\r\n    ngOnInit(): void {\r\n \r\n        this.loadNotes()\r\n    }\r\n\r\n    formateDate(inDate: Date): string {\r\n        const options = {\r\n            month: 'long',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n        };\r\n        return inDate.toLocaleString('ru', options);\r\n    }\r\n\r\n    async canActivate() {\r\n        const token = localStorage.getItem(\"jwt\");\r\n\r\n        if (token && !this.jwtHelper.isTokenExpired(token))\r\n            return true;\r\n\r\n        let refreshSuccessPromise = await this.tryRefreshingTokens(token)\r\n        if (refreshSuccessPromise)\r\n            return true\r\n\r\n        this.onChangedUserName.emit(\"\")\r\n        return false\r\n    }\r\n\r\n    private async tryRefreshingTokens(token: string): Promise<boolean> {\r\n        const refreshToken: string = localStorage.getItem(\"refreshToken\");\r\n        const credentials = JSON.stringify({ accessToken: token, refreshToken: refreshToken });\r\n        let isRefreshSuccess: boolean;\r\n        try {\r\n            const response = await this.httpService.refresh(credentials)\r\n\r\n            const newToken = response.body.accessToken;\r\n            const newRefreshToken = response.body.refreshToken;\r\n            localStorage.setItem(\"jwt\", newToken);\r\n            localStorage.setItem(\"refreshToken\", newRefreshToken);\r\n            isRefreshSuccess = true;\r\n        }\r\n        catch (ex) {\r\n            isRefreshSuccess = false;\r\n        }\r\n        return isRefreshSuccess;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);"]}